class Transform {
  float x, y, width, height;
  
  Transform(float x, float y, float width, float height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  
  boolean collidesWith(Transform other) {
    return (this.x < other.x + other.width &&
            this.x + this.width > other.x &&
            this.y < other.y + other.height &&
            this.y + this.height > other.y);
  }
}

class Pared {
  Transform transform;
  String imagen;
  
  Pared(Transform transform, String imagen) {
    this.transform = transform;
    this.imagen = imagen;
  }
}

class Laberinto {
  ArrayList<Pared> paredes;
  ArrayList<Habitacion> habitaciones;
  
  Laberinto() {
    paredes = new ArrayList<Pared>();
    habitaciones = new ArrayList<Habitacion>();
  }
  
  void agregarPared(Pared pared) {
    paredes.add(pared);
  }
  
  void agregarHabitacion(Habitacion habitacion) {
    habitaciones.add(habitacion);
  }
  
  boolean verificarColisiones(Personaje personaje) {
    for (Pared pared : paredes) {
      if (personaje.verificarColision(pared)) {
        return true;
      }
    }
    return false;
  }
}

class Personaje {
  Transform transform;
  String imagen;
  Linterna linterna;
  
  Personaje(Transform transform, String imagen) {
    this.transform = transform;
    this.imagen = imagen;
    this.linterna = null;
  }
  
  void mover(float deltaX, float deltaY) {
    transform.x += deltaX;
    transform.y += deltaY;
  }
  
  void recogerPista(Pista pista) {
    if (transform.collidesWith(pista.transform)) {
      pista.recolectar();
    }
  }
  
  boolean verificarColision(Pared pared) {
    return transform.collidesWith(pared.transform);
  }
}

class Linterna {
  float radio;
  Transform posicion;
  
  Linterna(float radio, Transform posicion) {
    this.radio = radio;
    this.posicion = posicion;
  }
  
  void iluminar() {
    // Implementaci贸n de la l贸gica de iluminaci贸n
  }
}

class Pista {
  Transform transform;
  boolean recolectada;
  
  Pista(Transform transform) {
    this.transform = transform;
    this.recolectada = false;
  }
  
  void recolectar() {
    recolectada = true;
  }
}

class Meta {
  Transform transform;
  
  Meta(Transform transform) {
    this.transform = transform;
  }
}

class Habitacion {
  ArrayList<Pared> paredes;
  ArrayList<Pista> pistas;
  Meta meta;
  
  Habitacion() {
    paredes = new ArrayList<Pared>();
    pistas = new ArrayList<Pista>();
    meta = null;
  }
  
  void agregarPared(Pared pared) {
    paredes.add(pared);
  }
  
  void agregarPista(Pista pista) {
    pistas.add(pista);
  }
  
  void agregarMeta(Meta meta) {
    this.meta = meta;
  }
}

void setup() {
  size(800, 800);
  Laberinto laberinto = new Laberinto();
  // Ejemplo de uso
  Transform t1 = new Transform(100, 100, 50, 50);
  Transform t2 = new Transform(120, 120, 50, 50);
  Pared pared = new Pared(t1, "pared.png");
  laberinto.agregarPared(pared);
  Personaje personaje = new Personaje(t2, "personaje.png");
  println(laberinto.verificarColisiones(personaje));
}

void draw() {
  // L贸gica de dibujo
}
